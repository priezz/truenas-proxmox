startup=1
seccomp=0
gpu_passthrough_intel=1
gpu_passthrough_nvidia=1

systemd_nspawn_user_args=
        --capability=all
        --console=pipe
        --property DeviceAllow='block rwm'
        --property DeviceAllow='net rwm'
        --property DeviceAllow='char-drm rwm'
        --property DeviceAllow='char-usb_device rwm'
        --property DeviceAllow='/dev/fuse rwm'
        --property DeviceAllow='/dev/loop-control rwm'
        --property DeviceAllow='/dev/net/tun rwm'
        --property DeviceAllow='/dev/null rwm'
        --property DeviceAllow='/dev/full rwm'
        --property DeviceAllow='/dev/random rwm'
        --property DeviceAllow='/dev/shm rwm'
        --property DeviceAllow='/dev/urandom rwm'
        --property DeviceAllow='/dev/zero rwm'
        --bind='/proc/devices'
        --bind='/sys/block'
        --bind='/sys/dev'
        --bind='/sys/devices'
        --bind='/sys/firmware'
        --bind='/sys/fs/fuse'
        --bind='/sys/fs/pstore'
        --bind-ro='/sys/module'
        --bind='/dev'
        --inaccessible='/sys/module/apparmor'
        --network-bridge=br0

# Script to run on the HOST before starting the jail
# Load kernel module and config kernel settings required for docker
pre_start_hook=#!/usr/bin/bash
    echo 'PRE_START_HOOK'
    echo 1 > /proc/sys/net/ipv4/ip_forward
    modprobe br_netfilter
    echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
    echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
    sudo sed -i "s/getNoSubKeyHtml:/_etNoSubKeyHtml:/" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js 2>&1 || true
    sudo sed -i "s/noSubKeyHtml/_oSubKeyHtml/" /usr/share/pve-manager/touch/pvemanager-mobile.js 2>&1 || true
    sudo sed -i "s/noSubKeyHtml/_oSubKeyHtml/" /usr/share/pve-manager/js/pvemanagerlib.js 2>&1 || true

# # Specify a command/script to run on the HOST after stopping the jail
# post_stop_hook=echo 'POST_STOP_HOOK'

# Specify command/script to run IN THE JAIL before starting it for the first time
# Useful to install packages on top of the base rootfs
# NOTE: this script will run in the host networking namespace and ignores
# all systemd_nspawn_user_args such as bind mounts
initial_setup=#!/usr/bin/bash
    echo 'Set the "root" user password:'
    passwd
    echo 'Set the "admin" user password:'
    adduser admin
    usermod -aG sudo admin

    cat > /etc/hosts <<EOF
    127.0.0.1				localhost
    ::1							localhost ip6-localhost ip6-loopback
    ff02::1					ip6-allnodes
    ff02::2					ip6-allrouters
    {{CONTAINER_IP}}	{{HOSTNAME}} {{HOSTNAME}}.local
    EOF

    mkdir -p /etc/network
    cat > /etc/network/interfaces <<EOF
    auto lo
    iface lo inet loopback

    auto host0
    iface host0 inet manual
    # Host network
          mtu 9000

    auto vmbr0
    iface vmbr0 inet static
    # Bridge for Virtual Machines
          metric 50
          address {{CONTAINER_IP}}/24
          gateway {{GATEWAY_IP}}
          mtu 9000
          bridge-ports host0
          bridge-stp off
          bridge-fd 0
    EOF

    cat > /etc/systemd/system/lxcfs.service.d/override.conf <<EOF
    [Unit]
    ConditionVirtualization=
    ConditionVirtualization=container
    EOF

    apt update && apt install -y bridge-utils ca-certificates chrony cron curl dbus dbus-broker ksmtuned open-iscsi openssh-server openvswitch-switch systemd-container wget whiptail postfix
    install -m 0755 -d /etc/apt/keyrings
    # mkdir -p /dev/pts
    # chown 755 /dev/pts
    mkdir -p /etc/apt/preferences.d
    mkdir -p /var/lib/lxcfs
    ln -sf /lib/systemd/system/systemd-networkd.service /etc/systemd/system/dbus-org.freedesktop.network1.service
    ln -sf /lib/systemd/system/systemd-resolved.service /etc/systemd/system/dbus-org.freedesktop.resolve1.service
    ln -sf /lib/systemd/system/networking.service /etc/systemd/system/multi-user.target.wants/networking.service
    ln -sf /lib/systemd/system/networking.service /etc/systemd/system/network-online.target.wants/networking.service
    #ln -sf /usr/lib/systemd/user/dbus-broker.service /etc/systemd/user/dbus.service
    #ln -sf /lib/systemd/system/dbus-broker.service /etc/systemd/system/dbus.service
    /lib/systemd/systemd-sysv-install enable dbus
    echo 'deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription' > /etc/apt/sources.list.d/pve-install-repo.list
    wget https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg

    # Install TrueNAS plugin for Proxmox VE
    keyring_location=/usr/share/keyrings/ksatechnologies-truenas-proxmox-testing-keyring.gpg
    curl -1sLf 'https://dl.cloudsmith.io/public/ksatechnologies/truenas-proxmox-testing/gpg.CACC9EE03F2DFFCC.key' |  gpg --dearmor >> ${keyring_location}
    cat << EOF > /etc/apt/sources.list.d/ksatechnologies-testing-repo.list
    # Source: KSATechnologies
    # Site: https://cloudsmith.io
    # Repository: KSATechnologies / truenas-proxmox-testing
    # Description: TrueNAS plugin for Proxmox VE - Testing
    deb [signed-by=${keyring_location}] https://dl.cloudsmith.io/public/ksatechnologies/truenas-proxmox-testing/deb/debian any-version main
    EOF

    apt update
#    curl -fsSL https://get.docker.com | sh

# You generally will not need to change the options below
systemd_run_default_args=--property=KillMode=mixed
        --property=Type=notify
        --property=RestartForceExitStatus=133
        --property=SuccessExitStatus=133
        --property=Delegate=yes
        --property=TasksMax=infinity
        --collect
        --setenv=SYSTEMD_NSPAWN_LOCK=0

systemd_nspawn_default_args=--keep-unit
        --quiet
        --boot
        --bind-ro=/sys/module
        --inaccessible=/sys/module/apparmor

# Used by jlmkr create
initial_rootfs_image=debian bookworm
